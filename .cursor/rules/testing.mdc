---
description: 
globs: tests/**/*.py
alwaysApply: false
---
# テスト開発ガイドライン

## TDD の原則

1. Red: 失敗するテストを書く
2. Green: テストを通す最小限のコードを書く
3. Refactor: コードを改善する

## テストの命名規則

- test_[機能]_[条件]_[期待結果]
- 例: test_create_product_with_valid_data_returns_201

## テストの構造

```python
def test_example():
    # Arrange: 準備
    
    # Act: 実行
    
    # Assert: 検証
```

## インポート方法

```python
# context.pyを使用したインポート
from .context import product_api
```

## テストの実行

uvを使用してテストを実行します：

```bash
# 全テストを実行
uv run pytest tests/ -v

# 特定のテストファイルを実行
uv run pytest tests/test_basic.py -v

# カバレッジ付きで実行
uv run pytest tests/ --cov=product_api --cov-report=html

# 特定のテスト関数のみ実行
uv run pytest tests/test_basic.py::test_create_product -v
```

## テスト環境のセットアップ

```bash
# 開発用依存関係の同期（pyproject.tomlから）
uv sync --dev

# または個別に追加
uv add --dev pytest pytest-cov httpx
```

## カバレッジ目標
- 最低80%のカバレッジを維持
- 重要なビジネスロジックは100%カバー

## FastAPIのテスト

```python
from fastapi.testclient import TestClient
from product_api.main import app

client = TestClient(app)

def test_create_product():
    # Arrange
    product_data = {"name": "テスト商品", "price": 1000}
    
    # Act
    response = client.post("/items", json=product_data)
    
    # Assert
    assert response.status_code == 201
    assert response.json()["name"] == "テスト商品"
```