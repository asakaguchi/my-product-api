---
description: 
globs: 
alwaysApply: true
---
# 開発フローガイドライン

## 標準開発フロー

このプロジェクトでは、以下の開発フローに従います：

1. **要件定義の確認**
   - docs/requirements.md などの要件を確認
   - 不明点があれば質問

2. **タスク分解**
   - 要件を 15-30 分で完了可能なタスクに分解（2 時間のハンズオン用）
   - 各タスクの依存関係を明確化
   - ユーザーにタスク分解を提示

3. **承認とIssue登録**
   - ユーザーから「ok」などの承認を受けたら、自動的に次のステップへ
   - GitHub CLI を使用して各タスクを Issue として登録
   - 全 Issue 登録完了を報告

4. **開発実施**
   - Issue ごとにブランチを作成
   - TDD アプローチで実装
   - 適切なコミットメッセージで記録

5. **PR作成とマージ**
   - テスト通過を確認
   - PR を作成してレビュー依頼
   - マージ後、次の Issue へ

## 重要な原則

- **Issue 駆動開発**: 必ず Issue 登録してから開発を開始
- **承認の解釈**: 「ok」「はい」「承認」などの肯定的な返答は、次のステップへ進む承認と解釈
- **自動化**: 承認後は自動的に適切な次のアクションを実行
- **uv の使用**: Python パッケージ管理には必ず uv を使用（pip は使用しない）

## GitHub Issue 登録時の形式

改行を含む本文を登録する際は、必ず $'...' 構文を使用してください：

```bash
# 改行を含む Issue 作成（正しい例）
gh issue create -t "タイトル" -b $'1行目\n2行目\n3行目'

# 複数行の Markdown（正しい例）
gh issue create -t "Task 1: プロジェクト基盤構築" -b $'## 概要\nFastAPIプロジェクトの初期設定\n\n## 実装内容\n- [ ] プロジェクト構造の作成\n- [ ] 依存関係の設定\n- [ ] 基本的なテスト'

# 誤った例（使用しない）
gh issue create -t "タイトル" -b "1行目
2行目"  # 改行が正しく処理されない
```

## プルリクエスト作成時の形式

PR の本文も同様に $'...' 構文を使用：

```bash
# PR作成の正しい例
gh pr create \
  --title "feat: 商品作成API実装" \
  --body $'## 概要\n商品作成エンドポイントの実装\n\n## 関連Issue\nFixes #2\n\n## 変更内容\n- POST /items エンドポイント追加\n- バリデーション実装\n- テスト作成'
```

## パッケージ管理コマンド

uv はプロジェクトの設定を自動的に認識し、必要な環境を構築します。

```bash
# 依存関係の同期（pyproject.toml から自動認識）
# 必要な Python バージョンも自動でインストールされます
uv sync

# パッケージの追加（pyproject.toml に自動追加）
uv add fastapi

# 開発用パッケージの追加
uv add --dev pytest

# 複数パッケージの一括追加
uv add fastapi uvicorn pydantic

# パッケージの削除
uv remove パッケージ名

# テストの実行
uv run pytest tests/ -v

# アプリケーションの起動
uv run uvicorn product_api.main:app --reload
```

**注意**：プロジェクトに pyproject.toml があれば、Python のインストールも含めてすべて自動化されます。

## ブランチ名の規則

- feature/task-{issue番号}-{簡潔な説明}
- 例：feature/task-1-project-setup